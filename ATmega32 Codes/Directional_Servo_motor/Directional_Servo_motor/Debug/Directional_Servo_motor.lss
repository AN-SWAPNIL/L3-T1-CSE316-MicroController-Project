
Directional_Servo_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000630  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdio.h>      /* Include std. library file */
#include <util/delay.h>    /* Include Delay header file */

int main(void)
{
	DDRB = 0b00000000;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRD |= (1<<PD5);  /* Make OC1A pin as output */
  6e:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;      /* Set timer1 count zero */
  70:	1d bc       	out	0x2d, r1	; 45
  72:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;    /* Set TOP count for timer1 in ICR1 register */
  74:	83 ec       	ldi	r24, 0xC3	; 195
  76:	99 e0       	ldi	r25, 0x09	; 9
  78:	97 bd       	out	0x27, r25	; 39
  7a:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  7c:	82 e8       	ldi	r24, 0x82	; 130
  7e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  80:	8b e1       	ldi	r24, 0x1B	; 27
  82:	8e bd       	out	0x2e, r24	; 46
	unsigned char status=0;
	int current=190;
	OCR1A=current;
  84:	8e eb       	ldi	r24, 0xBE	; 190
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	9b bd       	out	0x2b, r25	; 43
  8a:	8a bd       	out	0x2a, r24	; 42
	int prev=180;
  8c:	44 eb       	ldi	r20, 0xB4	; 180
  8e:	50 e0       	ldi	r21, 0x00	; 0

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	unsigned char status=0;
	int current=190;
  90:	2e eb       	ldi	r18, 0xBE	; 190
  92:	30 e0       	ldi	r19, 0x00	; 0
	{
		status=(PINB);
		status=(status&3);
		
		if(status==1){
			current = 135;		/* Set servo shaft at -30 position */
  94:	67 e8       	ldi	r22, 0x87	; 135
  96:	90 e0       	ldi	r25, 0x00	; 0
		} else if(status==2){
			current = 180;		/* Set servo shaft at 0 position */
  98:	e4 eb       	ldi	r30, 0xB4	; 180
  9a:	70 e0       	ldi	r23, 0x00	; 0
		} else if(status==3){
			current = 225;		/* Set servo at +30 position */
  9c:	a1 ee       	ldi	r26, 0xE1	; 225
  9e:	f0 e0       	ldi	r31, 0x00	; 0
	int current=190;
	OCR1A=current;
	int prev=180;
	while(1)
	{
		status=(PINB);
  a0:	86 b3       	in	r24, 0x16	; 22
		status=(status&3);
  a2:	83 70       	andi	r24, 0x03	; 3
		
		if(status==1){
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	39 f0       	breq	.+14     	; 0xb6 <main+0x4a>
			current = 135;		/* Set servo shaft at -30 position */
		} else if(status==2){
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	41 f0       	breq	.+16     	; 0xbc <main+0x50>
			current = 180;		/* Set servo shaft at 0 position */
		} else if(status==3){
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	41 f4       	brne	.+16     	; 0xc0 <main+0x54>
			current = 225;		/* Set servo at +30 position */
  b0:	2a 2f       	mov	r18, r26
  b2:	3f 2f       	mov	r19, r31
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x54>
	{
		status=(PINB);
		status=(status&3);
		
		if(status==1){
			current = 135;		/* Set servo shaft at -30 position */
  b6:	26 2f       	mov	r18, r22
  b8:	39 2f       	mov	r19, r25
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
		} else if(status==2){
			current = 180;		/* Set servo shaft at 0 position */
  bc:	2e 2f       	mov	r18, r30
  be:	37 2f       	mov	r19, r23
		} else if(status==3){
			current = 225;		/* Set servo at +30 position */
		}
		
		if(prev!=current)
  c0:	24 17       	cp	r18, r20
  c2:	35 07       	cpc	r19, r21
  c4:	11 f0       	breq	.+4      	; 0xca <main+0x5e>
		OCR1A=current;
  c6:	3b bd       	out	0x2b, r19	; 43
  c8:	2a bd       	out	0x2a, r18	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	5e e9       	ldi	r21, 0x9E	; 158
  ce:	84 e2       	ldi	r24, 0x24	; 36
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	50 40       	sbci	r21, 0x00	; 0
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		prev=current;
  dc:	a9 01       	movw	r20, r18
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0x34>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
