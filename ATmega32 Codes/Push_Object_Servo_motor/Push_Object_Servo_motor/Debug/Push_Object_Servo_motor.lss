
Push_Object_Servo_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000621  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005f  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdio.h>      /* Include std. library file */
#include <util/delay.h>    /* Include Delay header file */

int main(void)
{
	DDRB = 0b00000000;
  6c:	17 ba       	out	0x17, r1	; 23
	DDRA = 0b11111111;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	DDRD |= (1<<PD5);  /* Make OC1A pin as output */
  72:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;      /* Set timer1 count zero */
  74:	1d bc       	out	0x2d, r1	; 45
  76:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;    /* Set TOP count for timer1 in ICR1 register */
  78:	83 ec       	ldi	r24, 0xC3	; 195
  7a:	99 e0       	ldi	r25, 0x09	; 9
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  80:	82 e8       	ldi	r24, 0x82	; 130
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  84:	8b e1       	ldi	r24, 0x1B	; 27
  86:	8e bd       	out	0x2e, r24	; 46
	unsigned char status=0;
	int current=175;
	OCR1A=current;
  88:	8f ea       	ldi	r24, 0xAF	; 175
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
	while(1)
	{
		status=(PINB&1);
		
		if(status==0){
			current = 175;
  90:	6f ea       	ldi	r22, 0xAF	; 175
  92:	50 e0       	ldi	r21, 0x00	; 0
		} else {
			current = 300;
  94:	4c e2       	ldi	r20, 0x2C	; 44
  96:	31 e0       	ldi	r19, 0x01	; 1
	unsigned char status=0;
	int current=175;
	OCR1A=current;
	while(1)
	{
		status=(PINB&1);
  98:	86 b3       	in	r24, 0x16	; 22
		
		if(status==0){
  9a:	28 2f       	mov	r18, r24
  9c:	21 70       	andi	r18, 0x01	; 1
  9e:	80 ff       	sbrs	r24, 0
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <main+0x3c>
			current = 175;
		} else {
			current = 300;
  a2:	84 2f       	mov	r24, r20
  a4:	93 2f       	mov	r25, r19
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x40>
	while(1)
	{
		status=(PINB&1);
		
		if(status==0){
			current = 175;
  a8:	86 2f       	mov	r24, r22
  aa:	95 2f       	mov	r25, r21
		} else {
			current = 300;
		}
		OCR1A=current;
  ac:	9b bd       	out	0x2b, r25	; 43
  ae:	8a bd       	out	0x2a, r24	; 42
		PORTA = status;
  b0:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	8e e9       	ldi	r24, 0x9E	; 158
  b6:	94 e2       	ldi	r25, 0x24	; 36
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	e9 cf       	rjmp	.-46     	; 0x98 <main+0x2c>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
